Q1. What is the purpose of Python's OOP?
Ans:-
The concept of OOP in Python focuses on creating reusable code. This concept is also known as DRY (Don't Repeat Yourself).

Q2. Where does an inheritance search look for an attribute?
Ans:-
An inheritance search first looks in the instance object then in the class where the instance was created.Then check the higher superclasses progressing from left to right then the search stops at the first place when the attribute is found.

Q3. How do you distinguish between a class object and an instance object?
Ans:-
(i).A class is a template for creating objects in a program, whereas the object is an instance of a class.
(ii).A class is a logical entity, while an object is a physical entity.
(iii).A class does not allocate memory space; on the other hand, an object allocates memory space.
(iv).we can declare a class only once, but we can create more than one object using a class.
(v)Classes can’t be manipulated, while objects can be manipulated.
(vi)Classes don’t have any values, whereas objects have their own values.

Q4. What makes the first argument in a class’s method function special?
Ans:-
Any class method must have self as first argument. (The name can be any valid variable name, but the name self is a widely established convention in Python.) self represents an (arbitrary) instance of the class.

Q5. What is the purpose of the init method?
Ans:-
The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes.It works as a constructor of a class to construct the instances by passing some arguments which means these aruguments generally create the instance variable for a instances.This __init__ method usually called with one default pointer named as 'self' this name worked as a pointer to the class. 

Q6. What is the process for creating a class instance?
Ans:-
The process of creating class instance is like below:
#Creating a class:
class employee():
	def __init__(self,eno,ename):
		self.ename=ename
		self.eno=eno
#creating a instance named as soumya of a employee class
soumya=employee(1001,"soumya")
Here soumya is the instance of employee class.In this way we can create a class instance.

Q7. What is the process for creating a class?
Ans:-
The process for creating a class is:
#Creating a class:
class employee():
	def __init__(self,eno,ename):
		self.ename=ename
		self.eno=eno

Q8. How would you define the superclasses of a class?
Ans:-
The class from which a class inherits is called the parent or superclass. A class which inherits from a superclass is called a subclass, also called heir class or child class. Superclasses are sometimes called ancestors as well.

Q9. What is the relationship between classes and modules?
Ans:-
(i)In python world, module is a python file (.py) inside a package. Package is a folder that has __init__.py in its root. It is a way to organize your codes physically (in files and folders).
(ii)On the other hand, class is an abstraction that gathers data (characteristics) and method (behavior) definitions to represent a specific type of objects. It is a way to organize your codes logically.
(iii)A module can have zero or one or multiple classes. A class can be implemented in one or more .py files (modules).

Q10. How do you make instances and classes?
Ans:
#Creating a class:
class employee():
	def __init__(self,eno,ename):
		self.ename=ename
		self.eno=eno
	def printdetails(self):
		print("the employee no. is {self.eno} and the employee name is {self.ename}")  

#creating a instance named as soumya of a employee class
soumya=employee(1001,"soumya")
#To access the instance method.
soumya.printdetails()

Q11. Where and how should be class attributes created?
Ans:-
(i)A class attribute is shared by all instances of the class. To define a class attribute, you place it outside of the __init__() method.
(ii)Use class_name.class_attribute or object_name.class_attribute to access the value of the class_attribute.
(iii)Use class attributes for storing class contants, track data across all instances, and setting default values for all instances of the class.
(iv)Changing value by using classname.class_attribute = value will be reflected to all the objects.

Q12. Where and how are instance attributes created?
Ans:-
(i)Defined inside a constructor using the self parameter.
(ii)Specific to object.
(iii)Accessed using object dot notation e.g. object.instance_attribute.
(iv)Changing value of instance attribute will not be reflected to other objects.

Q13. What does the term "self" in a Python class mean?
Ans:-
"self" term in python worked as a pointer.The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?
Ans:-
Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because ‘+’ operator is overloaded by int class and str class.There is some built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading. 

Q15. When do you consider allowing operator overloading of your classes?
Ans:-
Operator overloading is mostly useful when you're making a new class that falls into an existing "Abstract Base Class" (ABC) -- indeed, many of the ABCs in standard library module collections rely on the presence of certain special methods (and special methods, one with names starting and ending with double underscores AKA "dunders", are exactly the way you perform operator overloading in Python).

Q16. What is the most popular form of operator overloading?
Ans:-
A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Ans:-
Both inheritance and polymorphism are fundamental concepts of object oriented programming. These concepts help us to create code that can be extended and easily maintainable

Q18. Describe three applications for exception processing.
Ans:-
There are mainly three kinds of distinguishable errors in Python: syntax errors, exceptions and logical errors.
i.Syntax errors are similar to grammar or spelling errors in a Language. If there is such an error in your code, Python cannot start to execute your code. You get a clear error message stating what is wrong and what needs to be fixed. Therefore, it is the easiest error type you can fix.Missing symbols (such as comma, bracket, colon), misspelling a keyword, having incorrect indentation are common syntax errors in Python.
ii.Exceptions may occur in syntactically correct code blocks at run time. When Python cannot execute the requested action, it terminates the code and raises an error message.Trying to read from a file which does not exist, performing operations with incompatible types of variables, dividing a number by zero are common exceptions that raise an error in Python.We must eliminate the syntax errors to run our Python code, while exceptions can be handled at runtime.
iii.Logical errors are the most difficult errors to fix as they don’t crash your code and you don’t get any error message.If you have logical errors, your code does not run as you expected.Using incorrect variable names, code that is not reflecting the algorithm logic properly, making mistakes on boolean operators will result in logical errors.

Q19. What happens if you don't do something extra to treat an exception?
Ans:-
if we don't handle exceptions,When an exception occurred, if you don't handle it, the program terminates abruptly and the code past the line that caused the exception will not get executed.

Q20. What are your options for recovering from an exception in your script?
Ans:-
we can also provide a generic except clause, which handles any exception. After the except clause(s),we can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.
Ans:-
there are two methods to handle Python exceptions: Try – This method catches the exceptions raised by the program. Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.
Ans:-
Finally block always executes irrespective of an exception being thrown or not. The final keyword allows you to create a block of code that follows a try-catch block. Finally, clause is optional. It is intended to define clean-up actions which should be that executed in all conditions.

Q23. What is the purpose of the try statement?
Ans:-
The try block lets you test a block of code for errors. The except block lets you handle the error. The else block lets you execute code when there is no error.

Q24. What are the two most popular try statement variations?
Ans:-
There are two other optional segments to a try block: else and finally . Both of these optional blocks will come after the try and the except . 

Q25. What is the purpose of the raise statement?
Ans:-
The raise keyword is used to raise an exception. You can define what kind of error to raise, and the text to print to the user.

Q26. What does the assert statement do, and what other statement is it like?
Ans:-
The assert keyword is used when debugging code. The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError

Q27. What is the purpose of the with/as argument, and what other statement is it like?
Ans:-
In Python, with statement is used in exception handling to make the code cleaner and much more readable. It simplifies the management of common resources like file streams.

Q28. What are *args, **kwargs?
Ans:-
*args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations

Q29. How can I pass optional or keyword parameters from one function to another?
Ans:-
Users can either pass their values or can pretend the function to use theirs default values which are specified. In this way, the user can call the function by either passing those optional parameters or just passing the required parameters. Without using keyword arguments. By using keyword arguments.

Q30. What are Lambda Functions?
Ans:-
Python Lambda Functions are anonymous function means that the function is without a name. As we already know that the def keyword is used to define a normal function in Python. Similarly, the lambda keyword is used to define an anonymous function in Python

Q31. Explain Inheritance in Python with an example?
Ans:-
Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes. Base class remains to be the source from which a subclass inherits.
Ex:-
#Creating a base class:
class A():
	def __init__(self,x,y):
		self.x=x
		self.y=y
#creating a base method 
	def func(self):
		print("this is a function of class A")
#creating a derived class which inherits the base class attributes and behaviours.
class B(A):
	pass
Here class B is inherits all the attributes and behaviours of class A.If we declare some instance to class B then it will call the variables and function which are inside the class A.
Inheritance is 3 types i.e.
i.Single inheritance
ii.Multiple Inheritance
iii.Multi level Inheritance

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Ans:-
Here in this class C if we call func() it will invoked the version of class A.

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Ans:-
Python has two built-in functions that work with inheritance:
Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int .
Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int .

Q34.Explain the use of the 'nonlocal' keyword in Python.
Ans:-
The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function. Use the keyword nonlocal to declare that the variable is not local.

Q35. What is the global keyword?
Ans:-
In Python, the global keyword allows us to modify the variable outside of the current scope. It is used to create a global variable and make changes to the variable in a local context.
